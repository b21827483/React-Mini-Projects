{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\tor\\\\React-Mini-Projects\\\\Meetups-Nextjs\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    img: props.meetup.img,\n    title: props.meetup.title,\n    address: props.meetup.address,\n    description: props.meetup.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 12\n  }, this);\n}\n\nexport default MeetupDetails;\nexport async function getStaticPaths(filter, options) {\n  const client = await MongoClient.connect('mongodb+srv://bug:NuvH56WQMAsSULW8@cluster0.jkhsyu7.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0');\n  const db = client.db('test');\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  return {\n    fallback: true,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://bug:NuvH56WQMAsSULW8@cluster0.jkhsyu7.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0');\n  const db = client.db('test');\n  const meetupsCollection = db.collection('meetups');\n  const meetup = await meetupsCollection.findOne({\n    _id: new ObjectId(meetupId)\n  });\n  console.log(meetup);\n  return {\n    props: {\n      meetup: {\n        id: meetup._id.toString(),\n        img: meetup.img,\n        title: meetup.title,\n        description: meetup.desription,\n        address: meetup.address\n      }\n    }\n  };\n}","map":{"version":3,"sources":["D:/tor/React-Mini-Projects/Meetups-Nextjs/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","MeetupDetails","props","meetup","img","title","address","description","getStaticPaths","filter","options","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","fallback","paths","map","params","meetupId","toString","getStaticProps","context","findOne","console","log","id","desription"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAAQC,WAAR,EAAqBC,QAArB,QAAoC,SAApC;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAE1B,sBAAO,QAAC,YAAD;AACH,IAAA,GAAG,EAAEA,KAAK,CAACC,MAAN,CAAaC,GADf;AAEH,IAAA,KAAK,EAAEF,KAAK,CAACC,MAAN,CAAaE,KAFjB;AAGH,IAAA,OAAO,EAAEH,KAAK,CAACC,MAAN,CAAaG,OAHnB;AAIH,IAAA,WAAW,EAAEJ,KAAK,CAACC,MAAN,CAAaI;AAJvB;AAAA;AAAA;AAAA;AAAA,UAAP;AAKH;;AAED,eAAeN,aAAf;AAEA,OAAO,eAAeO,cAAf,CAA8BC,MAA9B,EAAsCC,OAAtC,EAA+C;AAClD,QAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CAAoB,+GAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,CAAU,MAAV,CAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA0B;AAACC,IAAAA,GAAG,EAAE;AAAN,GAA1B,EAAoCC,OAApC,EAAtB;AAEA,SAAO;AACHC,IAAAA,QAAQ,EAAE,IADP;AAEHC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAYnB,MAAM,KAAK;AAACoB,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAErB,MAAM,CAACe,GAAP,CAAWO,QAAX;AAAX;AAAT,KAAL,CAAlB;AAFJ,GAAP;AAIH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAE1C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMb,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CAAoB,+GAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,CAAU,MAAV,CAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMZ,MAAM,GAAG,MAAMW,iBAAiB,CAACc,OAAlB,CAA0B;AAACV,IAAAA,GAAG,EAAE,IAAIlB,QAAJ,CAAawB,QAAb;AAAN,GAA1B,CAArB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY3B,MAAZ;AAEA,SAAO;AACHD,IAAAA,KAAK,EAAE;AACHC,MAAAA,MAAM,EAAE;AAAC4B,QAAAA,EAAE,EAAE5B,MAAM,CAACe,GAAP,CAAWO,QAAX,EAAL;AACCrB,QAAAA,GAAG,EAAED,MAAM,CAACC,GADb;AAECC,QAAAA,KAAK,EAAEF,MAAM,CAACE,KAFf;AAGCE,QAAAA,WAAW,EAAEJ,MAAM,CAAC6B,UAHrB;AAIC1B,QAAAA,OAAO,EAAEH,MAAM,CAACG;AAJjB;AADL;AADJ,GAAP;AASH","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport {MongoClient, ObjectId} from \"mongodb\";\r\n\r\nfunction MeetupDetails(props) {\r\n\r\n    return <MeetupDetail\r\n        img={props.meetup.img}\r\n        title={props.meetup.title}\r\n        address={props.meetup.address}\r\n        description={props.meetup.description}/>\r\n}\r\n\r\nexport default MeetupDetails;\r\n\r\nexport async function getStaticPaths(filter, options) {\r\n    const client = await MongoClient.connect('mongodb+srv://bug:NuvH56WQMAsSULW8@cluster0.jkhsyu7.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0');\r\n    const db = client.db('test');\r\n    const meetupsCollection = db.collection('meetups');\r\n\r\n    const meetups = await meetupsCollection.find({},{_id: 1}).toArray();\r\n\r\n    return {\r\n        fallback: true,\r\n        paths: meetups.map(meetup => ({params: {meetupId: meetup._id.toString()}}))\r\n    }\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n\r\n    const meetupId = context.params.meetupId;\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://bug:NuvH56WQMAsSULW8@cluster0.jkhsyu7.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0');\r\n    const db = client.db('test');\r\n    const meetupsCollection = db.collection('meetups');\r\n    \r\n    const meetup = await meetupsCollection.findOne({_id: new ObjectId(meetupId)});\r\n    console.log(meetup)\r\n\r\n    return {\r\n        props: {\r\n            meetup: {id: meetup._id.toString(),\r\n                     img: meetup.img,\r\n                     title: meetup.title,\r\n                     description: meetup.desription,\r\n                     address: meetup.address}\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}